//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChatClient.ServiceChat {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceChat.IServiceChat", CallbackContract=typeof(ChatClient.ServiceChat.IServiceChatCallback))]
    public interface IServiceChat {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/CreateUser", ReplyAction="http://tempuri.org/IServiceChat/CreateUserResponse")]
        int CreateUser();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/CreateUser", ReplyAction="http://tempuri.org/IServiceChat/CreateUserResponse")]
        System.Threading.Tasks.Task<int> CreateUserAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/Connect")]
        void Connect(int myID);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/Connect")]
        System.Threading.Tasks.Task ConnectAsync(int myID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        void Disconnect(int identificator, int indetificator1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/Disconnect", ReplyAction="http://tempuri.org/IServiceChat/DisconnectResponse")]
        System.Threading.Tasks.Task DisconnectAsync(int identificator, int indetificator1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/RemoveUserSearch", ReplyAction="http://tempuri.org/IServiceChat/RemoveUserSearchResponse")]
        void RemoveUserSearch(int identificator);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceChat/RemoveUserSearch", ReplyAction="http://tempuri.org/IServiceChat/RemoveUserSearchResponse")]
        System.Threading.Tasks.Task RemoveUserSearchAsync(int identificator);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessage")]
        void SendMessage(byte[] bytes, int identificator, int identificator1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(byte[] bytes, int identificator, int identificator1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessageExit")]
        void SendMessageExit(string message, int identificator, int identificator1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/SendMessageExit")]
        System.Threading.Tasks.Task SendMessageExitAsync(string message, int identificator, int identificator1);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/MessageCallBack")]
        void MessageCallBack(string message, byte[] bytes);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/GetIP")]
        void GetIP(int ID, int ID1);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IServiceChat/LeftChat")]
        void LeftChat();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChatChannel : ChatClient.ServiceChat.IServiceChat, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceChatClient : System.ServiceModel.DuplexClientBase<ChatClient.ServiceChat.IServiceChat>, ChatClient.ServiceChat.IServiceChat {
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceChatClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public int CreateUser() {
            return base.Channel.CreateUser();
        }
        
        public System.Threading.Tasks.Task<int> CreateUserAsync() {
            return base.Channel.CreateUserAsync();
        }
        
        public void Connect(int myID) {
            base.Channel.Connect(myID);
        }
        
        public System.Threading.Tasks.Task ConnectAsync(int myID) {
            return base.Channel.ConnectAsync(myID);
        }
        
        public void Disconnect(int identificator, int indetificator1) {
            base.Channel.Disconnect(identificator, indetificator1);
        }
        
        public System.Threading.Tasks.Task DisconnectAsync(int identificator, int indetificator1) {
            return base.Channel.DisconnectAsync(identificator, indetificator1);
        }
        
        public void RemoveUserSearch(int identificator) {
            base.Channel.RemoveUserSearch(identificator);
        }
        
        public System.Threading.Tasks.Task RemoveUserSearchAsync(int identificator) {
            return base.Channel.RemoveUserSearchAsync(identificator);
        }
        
        public void SendMessage(byte[] bytes, int identificator, int identificator1) {
            base.Channel.SendMessage(bytes, identificator, identificator1);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(byte[] bytes, int identificator, int identificator1) {
            return base.Channel.SendMessageAsync(bytes, identificator, identificator1);
        }
        
        public void SendMessageExit(string message, int identificator, int identificator1) {
            base.Channel.SendMessageExit(message, identificator, identificator1);
        }
        
        public System.Threading.Tasks.Task SendMessageExitAsync(string message, int identificator, int identificator1) {
            return base.Channel.SendMessageExitAsync(message, identificator, identificator1);
        }
    }
}
